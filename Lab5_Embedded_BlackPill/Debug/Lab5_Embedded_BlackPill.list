
Lab5_Embedded_BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a9c  08002a9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a9c  08002a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002aa4  08002aa4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa4  08002aa4  00012aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aa8  08002aa8  00012aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002ab8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002ab8  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8d4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018ea  00000000  00000000  0002b953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  0002d240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091f  00000000  00000000  0002ddd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015597  00000000  00000000  0002e6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c9a4  00000000  00000000  00043c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a33b  00000000  00000000  00050632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003128  00000000  00000000  000da970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000dda98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002a6c 	.word	0x08002a6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002a6c 	.word	0x08002a6c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <delay>:
uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM;
uint8_t Presence;
uint8_t Temperature[1];

void delay(uint16_t us){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <delay+0x30>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2200      	movs	r2, #0
 80004e4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80004e6:	bf00      	nop
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <delay+0x30>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d3f9      	bcc.n	80004e8 <delay+0x14>
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000028 	.word	0x20000028

08000508 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	4619      	mov	r1, r3
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 fd0c 	bl	8000f54 <HAL_GPIO_Init>
}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000560:	887b      	ldrh	r3, [r7, #2]
 8000562:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000568:	2301      	movs	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f000 fcee 	bl	8000f54 <HAL_GPIO_Init>
}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <DHT11_Start>:


void DHT11_Start (void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <DHT11_Start+0x30>)
 800058a:	f7ff ffbd 	bl	8000508 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000594:	4806      	ldr	r0, [pc, #24]	; (80005b0 <DHT11_Start+0x30>)
 8000596:	f000 fe79 	bl	800128c <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 800059a:	f244 6050 	movw	r0, #18000	; 0x4650
 800059e:	f7ff ff99 	bl	80004d4 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <DHT11_Start+0x30>)
 80005a8:	f7ff ffcc 	bl	8000544 <Set_Pin_Input>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40020400 	.word	0x40020400

080005b4 <Check_Response>:

uint8_t Check_Response (void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
	delay (40);
 80005be:	2028      	movs	r0, #40	; 0x28
 80005c0:	f7ff ff88 	bl	80004d4 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80005c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c8:	4811      	ldr	r0, [pc, #68]	; (8000610 <Check_Response+0x5c>)
 80005ca:	f000 fe47 	bl	800125c <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d10f      	bne.n	80005f4 <Check_Response+0x40>
	{
		delay (80);
 80005d4:	2050      	movs	r0, #80	; 0x50
 80005d6:	f7ff ff7d 	bl	80004d4 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80005da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005de:	480c      	ldr	r0, [pc, #48]	; (8000610 <Check_Response+0x5c>)
 80005e0:	f000 fe3c 	bl	800125c <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d002      	beq.n	80005f0 <Check_Response+0x3c>
 80005ea:	2301      	movs	r3, #1
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	e001      	b.n	80005f4 <Check_Response+0x40>
		else Response = -1;
 80005f0:	23ff      	movs	r3, #255	; 0xff
 80005f2:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 80005f4:	bf00      	nop
 80005f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <Check_Response+0x5c>)
 80005fc:	f000 fe2e 	bl	800125c <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d1f7      	bne.n	80005f6 <Check_Response+0x42>

	return Response;
 8000606:	79fb      	ldrb	r3, [r7, #7]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40020400 	.word	0x40020400

08000614 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800061a:	2300      	movs	r3, #0
 800061c:	71bb      	strb	r3, [r7, #6]
 800061e:	e03a      	b.n	8000696 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000620:	bf00      	nop
 8000622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000626:	4820      	ldr	r0, [pc, #128]	; (80006a8 <DHT11_Read+0x94>)
 8000628:	f000 fe18 	bl	800125c <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f7      	beq.n	8000622 <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 8000632:	2028      	movs	r0, #40	; 0x28
 8000634:	f7ff ff4e 	bl	80004d4 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	481a      	ldr	r0, [pc, #104]	; (80006a8 <DHT11_Read+0x94>)
 800063e:	f000 fe0d 	bl	800125c <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10e      	bne.n	8000666 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	f1c3 0307 	rsb	r3, r3, #7
 800064e:	2201      	movs	r2, #1
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	b25b      	sxtb	r3, r3
 8000656:	43db      	mvns	r3, r3
 8000658:	b25a      	sxtb	r2, r3
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	4013      	ands	r3, r2
 8000660:	b25b      	sxtb	r3, r3
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	e00b      	b.n	800067e <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	f1c3 0307 	rsb	r3, r3, #7
 800066c:	2201      	movs	r2, #1
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	b25a      	sxtb	r2, r3
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	4313      	orrs	r3, r2
 800067a:	b25b      	sxtb	r3, r3
 800067c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 800067e:	bf00      	nop
 8000680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <DHT11_Read+0x94>)
 8000686:	f000 fde9 	bl	800125c <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f7      	bne.n	8000680 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	3301      	adds	r3, #1
 8000694:	71bb      	strb	r3, [r7, #6]
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	2b07      	cmp	r3, #7
 800069a:	d9c1      	bls.n	8000620 <DHT11_Read+0xc>
	}
	return i;
 800069c:	79fb      	ldrb	r3, [r7, #7]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40020400 	.word	0x40020400

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fad4 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f87a 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f95a 	bl	8000970 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006bc:	f000 f8de 	bl	800087c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006c0:	f000 f92c 	bl	800091c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80006c4:	482f      	ldr	r0, [pc, #188]	; (8000784 <main+0xd8>)
 80006c6:	f001 fae3 	bl	8001c90 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d0:	482d      	ldr	r0, [pc, #180]	; (8000788 <main+0xdc>)
 80006d2:	f000 fddb 	bl	800128c <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80006d6:	20c8      	movs	r0, #200	; 0xc8
 80006d8:	f000 fb32 	bl	8000d40 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e2:	4829      	ldr	r0, [pc, #164]	; (8000788 <main+0xdc>)
 80006e4:	f000 fdd2 	bl	800128c <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80006e8:	20c8      	movs	r0, #200	; 0xc8
 80006ea:	f000 fb29 	bl	8000d40 <HAL_Delay>

	  DHT11_Start();
 80006ee:	f7ff ff47 	bl	8000580 <DHT11_Start>
	  Presence = Check_Response();
 80006f2:	f7ff ff5f 	bl	80005b4 <Check_Response>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <main+0xe0>)
 80006fc:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read();
 80006fe:	f7ff ff89 	bl	8000614 <DHT11_Read>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <main+0xe4>)
 8000708:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read();
 800070a:	f7ff ff83 	bl	8000614 <DHT11_Read>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <main+0xe8>)
 8000714:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read();
 8000716:	f7ff ff7d 	bl	8000614 <DHT11_Read>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <main+0xec>)
 8000720:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read();
 8000722:	f7ff ff77 	bl	8000614 <DHT11_Read>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <main+0xf0>)
 800072c:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 800072e:	f7ff ff71 	bl	8000614 <DHT11_Read>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <main+0xf4>)
 8000738:	801a      	strh	r2, [r3, #0]

	  if(Presence == 1 && SUM == Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2){
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <main+0xe0>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d11a      	bne.n	8000778 <main+0xcc>
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <main+0xf4>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	4619      	mov	r1, r3
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <main+0xe4>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <main+0xe8>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4a10      	ldr	r2, [pc, #64]	; (8000798 <main+0xec>)
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	4413      	add	r3, r2
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <main+0xf0>)
 800075c:	7812      	ldrb	r2, [r2, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4299      	cmp	r1, r3
 8000762:	d109      	bne.n	8000778 <main+0xcc>
		  Temperature[0] = Temp_byte1;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <main+0xec>)
 8000766:	781a      	ldrb	r2, [r3, #0]
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <main+0xf8>)
 800076a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, Temperature, 1, 100);
 800076c:	2364      	movs	r3, #100	; 0x64
 800076e:	2201      	movs	r2, #1
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <main+0xf8>)
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <main+0xfc>)
 8000774:	f001 fd92 	bl	800229c <HAL_UART_Transmit>
	  }
	  HAL_Delay(500);
 8000778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077c:	f000 fae0 	bl	8000d40 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000780:	e7a3      	b.n	80006ca <main+0x1e>
 8000782:	bf00      	nop
 8000784:	20000028 	.word	0x20000028
 8000788:	40020800 	.word	0x40020800
 800078c:	200000be 	.word	0x200000be
 8000790:	200000b8 	.word	0x200000b8
 8000794:	200000b9 	.word	0x200000b9
 8000798:	200000ba 	.word	0x200000ba
 800079c:	200000bb 	.word	0x200000bb
 80007a0:	200000bc 	.word	0x200000bc
 80007a4:	200000c0 	.word	0x200000c0
 80007a8:	20000070 	.word	0x20000070

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 f92a 	bl	8002a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <SystemClock_Config+0xc8>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a26      	ldr	r2, [pc, #152]	; (8000874 <SystemClock_Config+0xc8>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <SystemClock_Config+0xc8>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <SystemClock_Config+0xcc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a20      	ldr	r2, [pc, #128]	; (8000878 <SystemClock_Config+0xcc>)
 80007f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <SystemClock_Config+0xcc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000820:	2348      	movs	r3, #72	; 0x48
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fd45 	bl	80012c0 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800083c:	f000 f910 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2102      	movs	r1, #2
 800085c:	4618      	mov	r0, r3
 800085e:	f000 ffa7 	bl	80017b0 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000868:	f000 f8fa 	bl	8000a60 <Error_Handler>
  }
}
 800086c:	bf00      	nop
 800086e:	3750      	adds	r7, #80	; 0x50
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_TIM1_Init+0x98>)
 800089a:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <MX_TIM1_Init+0x9c>)
 800089c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_TIM1_Init+0x98>)
 80008a0:	2247      	movs	r2, #71	; 0x47
 80008a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_TIM1_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_TIM1_Init+0x98>)
 80008ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_TIM1_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_TIM1_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_TIM1_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c4:	4813      	ldr	r0, [pc, #76]	; (8000914 <MX_TIM1_Init+0x98>)
 80008c6:	f001 f993 	bl	8001bf0 <HAL_TIM_Base_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 f8c6 	bl	8000a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <MX_TIM1_Init+0x98>)
 80008e2:	f001 fa2f 	bl	8001d44 <HAL_TIM_ConfigClockSource>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008ec:	f000 f8b8 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_TIM1_Init+0x98>)
 80008fe:	f001 fc0f 	bl	8002120 <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000908:	f000 f8aa 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000028 	.word	0x20000028
 8000918:	40010000 	.word	0x40010000

0800091c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <MX_USART2_UART_Init+0x50>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000928:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000954:	f001 fc52 	bl	80021fc <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800095e:	f000 f87f 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000070 	.word	0x20000070
 800096c:	40004400 	.word	0x40004400

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <MX_GPIO_Init+0xe4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a31      	ldr	r2, [pc, #196]	; (8000a54 <MX_GPIO_Init+0xe4>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <MX_GPIO_Init+0xe4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <MX_GPIO_Init+0xe4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a2a      	ldr	r2, [pc, #168]	; (8000a54 <MX_GPIO_Init+0xe4>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <MX_GPIO_Init+0xe4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_GPIO_Init+0xe4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <MX_GPIO_Init+0xe4>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_GPIO_Init+0xe4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_GPIO_Init+0xe4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <MX_GPIO_Init+0xe4>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_GPIO_Init+0xe4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	4816      	ldr	r0, [pc, #88]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009fe:	f000 fc45 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a08:	4814      	ldr	r0, [pc, #80]	; (8000a5c <MX_GPIO_Init+0xec>)
 8000a0a:	f000 fc3f 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_GPIO_Init+0xe8>)
 8000a28:	f000 fa94 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_GPIO_Init+0xec>)
 8000a46:	f000 fa85 	bl	8000f54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020400 	.word	0x40020400

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d10d      	bne.n	8000aea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_TIM_Base_MspInit+0x40>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a09      	ldr	r2, [pc, #36]	; (8000afc <HAL_TIM_Base_MspInit+0x40>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <HAL_TIM_Base_MspInit+0x40>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40010000 	.word	0x40010000
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_UART_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12b      	bne.n	8000b7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_UART_MspInit+0x88>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0x88>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_UART_MspInit+0x88>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_UART_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <HAL_UART_MspInit+0x88>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_UART_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_UART_MspInit+0x8c>)
 8000b76:	f000 f9ed 	bl	8000f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40004400 	.word	0x40004400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f890 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0c:	f7ff ffea 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	; (8000c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	; (8000c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f001 fef5 	bl	8002a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fd37 	bl	80006ac <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c4c:	08002aac 	.word	0x08002aac
  ldr r2, =_sbss
 8000c50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c54:	200000c8 	.word	0x200000c8

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f931 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff feec 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f93b 	bl	8000f3a <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 f911 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	200000c4 	.word	0x200000c4

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	200000c4 	.word	0x200000c4

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffde 	bl	8000d28 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ecc:	f7ff ff8e 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff47 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff5c 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff8e 	bl	8000e40 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5d 	bl	8000dec <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffb0 	bl	8000ea8 <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e159      	b.n	8001224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 8148 	bne.w	800121e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d130      	bne.n	8001008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a2 	beq.w	800121e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b57      	ldr	r3, [pc, #348]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a56      	ldr	r2, [pc, #344]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b54      	ldr	r3, [pc, #336]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a52      	ldr	r2, [pc, #328]	; (8001240 <HAL_GPIO_Init+0x2ec>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a49      	ldr	r2, [pc, #292]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x202>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a48      	ldr	r2, [pc, #288]	; (8001248 <HAL_GPIO_Init+0x2f4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x1fe>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a47      	ldr	r2, [pc, #284]	; (800124c <HAL_GPIO_Init+0x2f8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x1fa>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a46      	ldr	r2, [pc, #280]	; (8001250 <HAL_GPIO_Init+0x2fc>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x1f6>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a45      	ldr	r2, [pc, #276]	; (8001254 <HAL_GPIO_Init+0x300>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x1f2>
 8001142:	2304      	movs	r3, #4
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001146:	2307      	movs	r3, #7
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <HAL_GPIO_Init+0x2ec>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_GPIO_Init+0x304>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <HAL_GPIO_Init+0x304>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a24      	ldr	r2, [pc, #144]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_GPIO_Init+0x304>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f aea2 	bls.w	8000f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e001      	b.n	800127e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a8:	e003      	b.n	80012b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	041a      	lsls	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	619a      	str	r2, [r3, #24]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e267      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d075      	beq.n	80013ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012de:	4b88      	ldr	r3, [pc, #544]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d00c      	beq.n	8001304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ea:	4b85      	ldr	r3, [pc, #532]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d112      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f6:	4b82      	ldr	r3, [pc, #520]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001302:	d10b      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	4b7e      	ldr	r3, [pc, #504]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d05b      	beq.n	80013c8 <HAL_RCC_OscConfig+0x108>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d157      	bne.n	80013c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e242      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d106      	bne.n	8001334 <HAL_RCC_OscConfig+0x74>
 8001326:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a75      	ldr	r2, [pc, #468]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e01d      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x98>
 800133e:	4b70      	ldr	r3, [pc, #448]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6f      	ldr	r2, [pc, #444]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b6d      	ldr	r3, [pc, #436]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a6c      	ldr	r2, [pc, #432]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001358:	4b69      	ldr	r3, [pc, #420]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a68      	ldr	r2, [pc, #416]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800135e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b66      	ldr	r3, [pc, #408]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a65      	ldr	r2, [pc, #404]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800136a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d013      	beq.n	80013a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fcd6 	bl	8000d28 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fcd2 	bl	8000d28 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e207      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b5b      	ldr	r3, [pc, #364]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0xc0>
 800139e:	e014      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fcc2 	bl	8000d28 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fcbe 	bl	8000d28 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1f3      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	4b51      	ldr	r3, [pc, #324]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0xe8>
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d063      	beq.n	800149e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d6:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d11c      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ee:	4b44      	ldr	r3, [pc, #272]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x152>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e1c7      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4937      	ldr	r1, [pc, #220]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	e03a      	b.n	800149e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001430:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_RCC_OscConfig+0x244>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fc77 	bl	8000d28 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fc73 	bl	8000d28 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e1a8      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4925      	ldr	r1, [pc, #148]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_RCC_OscConfig+0x244>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fc56 	bl	8000d28 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fc52 	bl	8000d28 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e187      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d036      	beq.n	8001518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d016      	beq.n	80014e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_RCC_OscConfig+0x248>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff fc36 	bl	8000d28 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fc32 	bl	8000d28 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e167      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80014d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x200>
 80014de:	e01b      	b.n	8001518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_OscConfig+0x248>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fc1f 	bl	8000d28 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	e00e      	b.n	800150c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fc1b 	bl	8000d28 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d907      	bls.n	800150c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e150      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
 8001500:	40023800 	.word	0x40023800
 8001504:	42470000 	.word	0x42470000
 8001508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	4b88      	ldr	r3, [pc, #544]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ea      	bne.n	80014ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8097 	beq.w	8001654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152a:	4b81      	ldr	r3, [pc, #516]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10f      	bne.n	8001556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b7d      	ldr	r3, [pc, #500]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a7c      	ldr	r2, [pc, #496]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b7a      	ldr	r3, [pc, #488]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b77      	ldr	r3, [pc, #476]	; (8001734 <HAL_RCC_OscConfig+0x474>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b74      	ldr	r3, [pc, #464]	; (8001734 <HAL_RCC_OscConfig+0x474>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a73      	ldr	r2, [pc, #460]	; (8001734 <HAL_RCC_OscConfig+0x474>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff fbdb 	bl	8000d28 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001576:	f7ff fbd7 	bl	8000d28 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e10c      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	4b6a      	ldr	r3, [pc, #424]	; (8001734 <HAL_RCC_OscConfig+0x474>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x2ea>
 800159c:	4b64      	ldr	r3, [pc, #400]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a63      	ldr	r2, [pc, #396]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	e01c      	b.n	80015e4 <HAL_RCC_OscConfig+0x324>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x30c>
 80015b2:	4b5f      	ldr	r3, [pc, #380]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a5e      	ldr	r2, [pc, #376]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a5b      	ldr	r2, [pc, #364]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ca:	e00b      	b.n	80015e4 <HAL_RCC_OscConfig+0x324>
 80015cc:	4b58      	ldr	r3, [pc, #352]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	4a57      	ldr	r2, [pc, #348]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	6713      	str	r3, [r2, #112]	; 0x70
 80015d8:	4b55      	ldr	r3, [pc, #340]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a54      	ldr	r2, [pc, #336]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015de:	f023 0304 	bic.w	r3, r3, #4
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d015      	beq.n	8001618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff fb9c 	bl	8000d28 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f2:	e00a      	b.n	800160a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff fb98 	bl	8000d28 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e0cb      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160a:	4b49      	ldr	r3, [pc, #292]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0ee      	beq.n	80015f4 <HAL_RCC_OscConfig+0x334>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff fb86 	bl	8000d28 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161e:	e00a      	b.n	8001636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001620:	f7ff fb82 	bl	8000d28 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e0b5      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ee      	bne.n	8001620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001648:	4b39      	ldr	r3, [pc, #228]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	4a38      	ldr	r2, [pc, #224]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800164e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a1 	beq.w	80017a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165e:	4b34      	ldr	r3, [pc, #208]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	d05c      	beq.n	8001724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d141      	bne.n	80016f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b31      	ldr	r3, [pc, #196]	; (8001738 <HAL_RCC_OscConfig+0x478>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fb56 	bl	8000d28 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fb52 	bl	8000d28 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e087      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	019b      	lsls	r3, r3, #6
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	3b01      	subs	r3, #1
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	061b      	lsls	r3, r3, #24
 80016c2:	491b      	ldr	r1, [pc, #108]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x478>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb2b 	bl	8000d28 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff fb27 	bl	8000d28 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e05c      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x416>
 80016f4:	e054      	b.n	80017a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_RCC_OscConfig+0x478>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb14 	bl	8000d28 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff fb10 	bl	8000d28 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e045      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x444>
 8001722:	e03d      	b.n	80017a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e038      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000
 8001738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x4ec>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d028      	beq.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d121      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d11a      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800176c:	4013      	ands	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001774:	4293      	cmp	r3, r2
 8001776:	d111      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	3b01      	subs	r3, #1
 8001786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d107      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0cc      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d90c      	bls.n	80017ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b65      	ldr	r3, [pc, #404]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0b8      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d020      	beq.n	800183a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001804:	4b59      	ldr	r3, [pc, #356]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a58      	ldr	r2, [pc, #352]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800180e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800181c:	4b53      	ldr	r3, [pc, #332]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a52      	ldr	r2, [pc, #328]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001828:	4b50      	ldr	r3, [pc, #320]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	494d      	ldr	r1, [pc, #308]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d044      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d119      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e07f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d003      	beq.n	800186e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	2b03      	cmp	r3, #3
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e06f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e067      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188e:	4b37      	ldr	r3, [pc, #220]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f023 0203 	bic.w	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4934      	ldr	r1, [pc, #208]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a0:	f7ff fa42 	bl	8000d28 <HAL_GetTick>
 80018a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	e00a      	b.n	80018be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff fa3e 	bl	8000d28 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e04f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 020c 	and.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1eb      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d20c      	bcs.n	80018f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e032      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4916      	ldr	r1, [pc, #88]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	490e      	ldr	r1, [pc, #56]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001936:	f000 f821 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800193a:	4602      	mov	r2, r0
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	490a      	ldr	r1, [pc, #40]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	5ccb      	ldrb	r3, [r1, r3]
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f9a2 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00
 800196c:	40023800 	.word	0x40023800
 8001970:	08002a84 	.word	0x08002a84
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001980:	b094      	sub	sp, #80	; 0x50
 8001982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
 8001988:	2300      	movs	r3, #0
 800198a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800198c:	2300      	movs	r3, #0
 800198e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001994:	4b79      	ldr	r3, [pc, #484]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d00d      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x40>
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	f200 80e1 	bhi.w	8001b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x34>
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ae:	e0db      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b73      	ldr	r3, [pc, #460]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80019b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019b4:	e0db      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x208>)
 80019b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ba:	e0d8      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019bc:	4b6f      	ldr	r3, [pc, #444]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c6:	4b6d      	ldr	r3, [pc, #436]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d063      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d2:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	099b      	lsrs	r3, r3, #6
 80019d8:	2200      	movs	r2, #0
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
 80019dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
 80019e6:	2300      	movs	r3, #0
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
 80019ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019ee:	4622      	mov	r2, r4
 80019f0:	462b      	mov	r3, r5
 80019f2:	f04f 0000 	mov.w	r0, #0
 80019f6:	f04f 0100 	mov.w	r1, #0
 80019fa:	0159      	lsls	r1, r3, #5
 80019fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a00:	0150      	lsls	r0, r2, #5
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4621      	mov	r1, r4
 8001a08:	1a51      	subs	r1, r2, r1
 8001a0a:	6139      	str	r1, [r7, #16]
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a20:	4659      	mov	r1, fp
 8001a22:	018b      	lsls	r3, r1, #6
 8001a24:	4651      	mov	r1, sl
 8001a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a2a:	4651      	mov	r1, sl
 8001a2c:	018a      	lsls	r2, r1, #6
 8001a2e:	4651      	mov	r1, sl
 8001a30:	ebb2 0801 	subs.w	r8, r2, r1
 8001a34:	4659      	mov	r1, fp
 8001a36:	eb63 0901 	sbc.w	r9, r3, r1
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a4e:	4690      	mov	r8, r2
 8001a50:	4699      	mov	r9, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	eb18 0303 	adds.w	r3, r8, r3
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	eb49 0303 	adc.w	r3, r9, r3
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a6e:	4629      	mov	r1, r5
 8001a70:	024b      	lsls	r3, r1, #9
 8001a72:	4621      	mov	r1, r4
 8001a74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a78:	4621      	mov	r1, r4
 8001a7a:	024a      	lsls	r2, r1, #9
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a82:	2200      	movs	r2, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a8c:	f7fe fba4 	bl	80001d8 <__aeabi_uldivmod>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4613      	mov	r3, r2
 8001a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a98:	e058      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aaa:	623b      	str	r3, [r7, #32]
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ab4:	4642      	mov	r2, r8
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	0159      	lsls	r1, r3, #5
 8001ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac6:	0150      	lsls	r0, r2, #5
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4641      	mov	r1, r8
 8001ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ad2:	4649      	mov	r1, r9
 8001ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aec:	ebb2 040a 	subs.w	r4, r2, sl
 8001af0:	eb63 050b 	sbc.w	r5, r3, fp
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	00eb      	lsls	r3, r5, #3
 8001afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b02:	00e2      	lsls	r2, r4, #3
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	4643      	mov	r3, r8
 8001b0a:	18e3      	adds	r3, r4, r3
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	464b      	mov	r3, r9
 8001b10:	eb45 0303 	adc.w	r3, r5, r3
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b22:	4629      	mov	r1, r5
 8001b24:	028b      	lsls	r3, r1, #10
 8001b26:	4621      	mov	r1, r4
 8001b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	028a      	lsls	r2, r1, #10
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b36:	2200      	movs	r2, #0
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	61fa      	str	r2, [r7, #28]
 8001b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b40:	f7fe fb4a 	bl	80001d8 <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	0c1b      	lsrs	r3, r3, #16
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	3301      	adds	r3, #1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b66:	e002      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3750      	adds	r7, #80	; 0x50
 8001b74:	46bd      	mov	sp, r7
 8001b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	00f42400 	.word	0x00f42400
 8001b84:	007a1200 	.word	0x007a1200

08001b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000000 	.word	0x20000000

08001ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ba4:	f7ff fff0 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	0a9b      	lsrs	r3, r3, #10
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	4903      	ldr	r1, [pc, #12]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb6:	5ccb      	ldrb	r3, [r1, r3]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	08002a94 	.word	0x08002a94

08001bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bcc:	f7ff ffdc 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0b5b      	lsrs	r3, r3, #13
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4903      	ldr	r1, [pc, #12]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	08002a94 	.word	0x08002a94

08001bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e041      	b.n	8001c86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7fe ff50 	bl	8000abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4610      	mov	r0, r2
 8001c30:	f000 f950 	bl	8001ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d001      	beq.n	8001ca8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e03c      	b.n	8001d22 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1e      	ldr	r2, [pc, #120]	; (8001d30 <HAL_TIM_Base_Start+0xa0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d018      	beq.n	8001cec <HAL_TIM_Base_Start+0x5c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc2:	d013      	beq.n	8001cec <HAL_TIM_Base_Start+0x5c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <HAL_TIM_Base_Start+0xa4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00e      	beq.n	8001cec <HAL_TIM_Base_Start+0x5c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_TIM_Base_Start+0xa8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_TIM_Base_Start+0x5c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_TIM_Base_Start+0xac>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d004      	beq.n	8001cec <HAL_TIM_Base_Start+0x5c>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <HAL_TIM_Base_Start+0xb0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d111      	bne.n	8001d10 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d010      	beq.n	8001d20 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0e:	e007      	b.n	8001d20 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40000400 	.word	0x40000400
 8001d38:	40000800 	.word	0x40000800
 8001d3c:	40000c00 	.word	0x40000c00
 8001d40:	40014000 	.word	0x40014000

08001d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_TIM_ConfigClockSource+0x1c>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e0b4      	b.n	8001eca <HAL_TIM_ConfigClockSource+0x186>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d98:	d03e      	beq.n	8001e18 <HAL_TIM_ConfigClockSource+0xd4>
 8001d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d9e:	f200 8087 	bhi.w	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da6:	f000 8086 	beq.w	8001eb6 <HAL_TIM_ConfigClockSource+0x172>
 8001daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dae:	d87f      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001db0:	2b70      	cmp	r3, #112	; 0x70
 8001db2:	d01a      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0xa6>
 8001db4:	2b70      	cmp	r3, #112	; 0x70
 8001db6:	d87b      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001db8:	2b60      	cmp	r3, #96	; 0x60
 8001dba:	d050      	beq.n	8001e5e <HAL_TIM_ConfigClockSource+0x11a>
 8001dbc:	2b60      	cmp	r3, #96	; 0x60
 8001dbe:	d877      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001dc0:	2b50      	cmp	r3, #80	; 0x50
 8001dc2:	d03c      	beq.n	8001e3e <HAL_TIM_ConfigClockSource+0xfa>
 8001dc4:	2b50      	cmp	r3, #80	; 0x50
 8001dc6:	d873      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d058      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0x13a>
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d86f      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001dd0:	2b30      	cmp	r3, #48	; 0x30
 8001dd2:	d064      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x15a>
 8001dd4:	2b30      	cmp	r3, #48	; 0x30
 8001dd6:	d86b      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d060      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x15a>
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d867      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d05c      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x15a>
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d05a      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x15a>
 8001de8:	e062      	b.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001dfa:	f000 f971 	bl	80020e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	609a      	str	r2, [r3, #8]
      break;
 8001e16:	e04f      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e28:	f000 f95a 	bl	80020e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e3a:	609a      	str	r2, [r3, #8]
      break;
 8001e3c:	e03c      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f000 f8ce 	bl	8001fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2150      	movs	r1, #80	; 0x50
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f927 	bl	80020aa <TIM_ITRx_SetConfig>
      break;
 8001e5c:	e02c      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f000 f8ed 	bl	800204a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2160      	movs	r1, #96	; 0x60
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f917 	bl	80020aa <TIM_ITRx_SetConfig>
      break;
 8001e7c:	e01c      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f000 f8ae 	bl	8001fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2140      	movs	r1, #64	; 0x40
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f907 	bl	80020aa <TIM_ITRx_SetConfig>
      break;
 8001e9c:	e00c      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f000 f8fe 	bl	80020aa <TIM_ITRx_SetConfig>
      break;
 8001eae:	e003      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb4:	e000      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <TIM_Base_SetConfig+0xfc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00f      	beq.n	8001f0c <TIM_Base_SetConfig+0x38>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef2:	d00b      	beq.n	8001f0c <TIM_Base_SetConfig+0x38>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a37      	ldr	r2, [pc, #220]	; (8001fd4 <TIM_Base_SetConfig+0x100>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d007      	beq.n	8001f0c <TIM_Base_SetConfig+0x38>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a36      	ldr	r2, [pc, #216]	; (8001fd8 <TIM_Base_SetConfig+0x104>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d003      	beq.n	8001f0c <TIM_Base_SetConfig+0x38>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a35      	ldr	r2, [pc, #212]	; (8001fdc <TIM_Base_SetConfig+0x108>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d108      	bne.n	8001f1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <TIM_Base_SetConfig+0xfc>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01b      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2c:	d017      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a28      	ldr	r2, [pc, #160]	; (8001fd4 <TIM_Base_SetConfig+0x100>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <TIM_Base_SetConfig+0x104>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00f      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <TIM_Base_SetConfig+0x108>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00b      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a25      	ldr	r2, [pc, #148]	; (8001fe0 <TIM_Base_SetConfig+0x10c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <TIM_Base_SetConfig+0x110>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d003      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a23      	ldr	r2, [pc, #140]	; (8001fe8 <TIM_Base_SetConfig+0x114>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d108      	bne.n	8001f70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <TIM_Base_SetConfig+0xfc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d103      	bne.n	8001fa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f023 0201 	bic.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	611a      	str	r2, [r3, #16]
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000800 	.word	0x40000800
 8001fdc:	40000c00 	.word	0x40000c00
 8001fe0:	40014000 	.word	0x40014000
 8001fe4:	40014400 	.word	0x40014400
 8001fe8:	40014800 	.word	0x40014800

08001fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	f023 0201 	bic.w	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f023 030a 	bic.w	r3, r3, #10
 8002028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	621a      	str	r2, [r3, #32]
}
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800204a:	b480      	push	{r7}
 800204c:	b087      	sub	sp, #28
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f023 0210 	bic.w	r2, r3, #16
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002074:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	031b      	lsls	r3, r3, #12
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002086:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4313      	orrs	r3, r2
 8002090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	621a      	str	r2, [r3, #32]
}
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f043 0307 	orr.w	r3, r3, #7
 80020cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	609a      	str	r2, [r3, #8]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	021a      	lsls	r2, r3, #8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	431a      	orrs	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	609a      	str	r2, [r3, #8]
}
 8002114:	bf00      	nop
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002134:	2302      	movs	r3, #2
 8002136:	e050      	b.n	80021da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d018      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002184:	d013      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a18      	ldr	r2, [pc, #96]	; (80021ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00e      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d004      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10c      	bne.n	80021c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40000800 	.word	0x40000800
 80021f4:	40000c00 	.word	0x40000c00
 80021f8:	40014000 	.word	0x40014000

080021fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e042      	b.n	8002294 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fc6c 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	; 0x24
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800223e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f973 	bl	800252c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	4613      	mov	r3, r2
 80022aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d175      	bne.n	80023a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_UART_Transmit+0x2c>
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e06e      	b.n	80023aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2221      	movs	r2, #33	; 0x21
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022da:	f7fe fd25 	bl	8000d28 <HAL_GetTick>
 80022de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	88fa      	ldrh	r2, [r7, #6]
 80022e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	88fa      	ldrh	r2, [r7, #6]
 80022ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f4:	d108      	bne.n	8002308 <HAL_UART_Transmit+0x6c>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	e003      	b.n	8002310 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002310:	e02e      	b.n	8002370 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2200      	movs	r2, #0
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f848 	bl	80023b2 <UART_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e03a      	b.n	80023aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10b      	bne.n	8002352 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002348:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	3302      	adds	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	e007      	b.n	8002362 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	781a      	ldrb	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	3301      	adds	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1cb      	bne.n	8002312 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2200      	movs	r2, #0
 8002382:	2140      	movs	r1, #64	; 0x40
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f814 	bl	80023b2 <UART_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e006      	b.n	80023aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e000      	b.n	80023aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023a8:	2302      	movs	r3, #2
  }
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4613      	mov	r3, r2
 80023c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c2:	e03b      	b.n	800243c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ca:	d037      	beq.n	800243c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023cc:	f7fe fcac 	bl	8000d28 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	6a3a      	ldr	r2, [r7, #32]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d302      	bcc.n	80023e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e03a      	b.n	800245c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d023      	beq.n	800243c <UART_WaitOnFlagUntilTimeout+0x8a>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b80      	cmp	r3, #128	; 0x80
 80023f8:	d020      	beq.n	800243c <UART_WaitOnFlagUntilTimeout+0x8a>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d01d      	beq.n	800243c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b08      	cmp	r3, #8
 800240c:	d116      	bne.n	800243c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f81d 	bl	8002464 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2208      	movs	r2, #8
 800242e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e00f      	b.n	800245c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4013      	ands	r3, r2
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	429a      	cmp	r2, r3
 8002458:	d0b4      	beq.n	80023c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002464:	b480      	push	{r7}
 8002466:	b095      	sub	sp, #84	; 0x54
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002476:	e853 3f00 	ldrex	r3, [r3]
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	330c      	adds	r3, #12
 800248a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800248c:	643a      	str	r2, [r7, #64]	; 0x40
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002494:	e841 2300 	strex	r3, r2, [r1]
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800249a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e5      	bne.n	800246c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3314      	adds	r3, #20
 80024a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	e853 3f00 	ldrex	r3, [r3]
 80024ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3314      	adds	r3, #20
 80024be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c8:	e841 2300 	strex	r3, r2, [r1]
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1e5      	bne.n	80024a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d119      	bne.n	8002510 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	330c      	adds	r3, #12
 80024e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	e853 3f00 	ldrex	r3, [r3]
 80024ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f023 0310 	bic.w	r3, r3, #16
 80024f2:	647b      	str	r3, [r7, #68]	; 0x44
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	330c      	adds	r3, #12
 80024fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024fc:	61ba      	str	r2, [r7, #24]
 80024fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002500:	6979      	ldr	r1, [r7, #20]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	e841 2300 	strex	r3, r2, [r1]
 8002508:	613b      	str	r3, [r7, #16]
   return(result);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1e5      	bne.n	80024dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800251e:	bf00      	nop
 8002520:	3754      	adds	r7, #84	; 0x54
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800252c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002530:	b0c0      	sub	sp, #256	; 0x100
 8002532:	af00      	add	r7, sp, #0
 8002534:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002548:	68d9      	ldr	r1, [r3, #12]
 800254a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	ea40 0301 	orr.w	r3, r0, r1
 8002554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	431a      	orrs	r2, r3
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	431a      	orrs	r2, r3
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002584:	f021 010c 	bic.w	r1, r1, #12
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002592:	430b      	orrs	r3, r1
 8002594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a6:	6999      	ldr	r1, [r3, #24]
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	ea40 0301 	orr.w	r3, r0, r1
 80025b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b8f      	ldr	r3, [pc, #572]	; (80027f8 <UART_SetConfig+0x2cc>)
 80025bc:	429a      	cmp	r2, r3
 80025be:	d005      	beq.n	80025cc <UART_SetConfig+0xa0>
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b8d      	ldr	r3, [pc, #564]	; (80027fc <UART_SetConfig+0x2d0>)
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d104      	bne.n	80025d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025cc:	f7ff fafc 	bl	8001bc8 <HAL_RCC_GetPCLK2Freq>
 80025d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025d4:	e003      	b.n	80025de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025d6:	f7ff fae3 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 80025da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e8:	f040 810c 	bne.w	8002804 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025fe:	4622      	mov	r2, r4
 8002600:	462b      	mov	r3, r5
 8002602:	1891      	adds	r1, r2, r2
 8002604:	65b9      	str	r1, [r7, #88]	; 0x58
 8002606:	415b      	adcs	r3, r3
 8002608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800260a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800260e:	4621      	mov	r1, r4
 8002610:	eb12 0801 	adds.w	r8, r2, r1
 8002614:	4629      	mov	r1, r5
 8002616:	eb43 0901 	adc.w	r9, r3, r1
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800262a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262e:	4690      	mov	r8, r2
 8002630:	4699      	mov	r9, r3
 8002632:	4623      	mov	r3, r4
 8002634:	eb18 0303 	adds.w	r3, r8, r3
 8002638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800263c:	462b      	mov	r3, r5
 800263e:	eb49 0303 	adc.w	r3, r9, r3
 8002642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002652:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002656:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800265a:	460b      	mov	r3, r1
 800265c:	18db      	adds	r3, r3, r3
 800265e:	653b      	str	r3, [r7, #80]	; 0x50
 8002660:	4613      	mov	r3, r2
 8002662:	eb42 0303 	adc.w	r3, r2, r3
 8002666:	657b      	str	r3, [r7, #84]	; 0x54
 8002668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800266c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002670:	f7fd fdb2 	bl	80001d8 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4b61      	ldr	r3, [pc, #388]	; (8002800 <UART_SetConfig+0x2d4>)
 800267a:	fba3 2302 	umull	r2, r3, r3, r2
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	011c      	lsls	r4, r3, #4
 8002682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002686:	2200      	movs	r2, #0
 8002688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800268c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002690:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	1891      	adds	r1, r2, r2
 800269a:	64b9      	str	r1, [r7, #72]	; 0x48
 800269c:	415b      	adcs	r3, r3
 800269e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026a4:	4641      	mov	r1, r8
 80026a6:	eb12 0a01 	adds.w	sl, r2, r1
 80026aa:	4649      	mov	r1, r9
 80026ac:	eb43 0b01 	adc.w	fp, r3, r1
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026c4:	4692      	mov	sl, r2
 80026c6:	469b      	mov	fp, r3
 80026c8:	4643      	mov	r3, r8
 80026ca:	eb1a 0303 	adds.w	r3, sl, r3
 80026ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026d2:	464b      	mov	r3, r9
 80026d4:	eb4b 0303 	adc.w	r3, fp, r3
 80026d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026f0:	460b      	mov	r3, r1
 80026f2:	18db      	adds	r3, r3, r3
 80026f4:	643b      	str	r3, [r7, #64]	; 0x40
 80026f6:	4613      	mov	r3, r2
 80026f8:	eb42 0303 	adc.w	r3, r2, r3
 80026fc:	647b      	str	r3, [r7, #68]	; 0x44
 80026fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002706:	f7fd fd67 	bl	80001d8 <__aeabi_uldivmod>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4611      	mov	r1, r2
 8002710:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <UART_SetConfig+0x2d4>)
 8002712:	fba3 2301 	umull	r2, r3, r3, r1
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2264      	movs	r2, #100	; 0x64
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	1acb      	subs	r3, r1, r3
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002726:	4b36      	ldr	r3, [pc, #216]	; (8002800 <UART_SetConfig+0x2d4>)
 8002728:	fba3 2302 	umull	r2, r3, r3, r2
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002734:	441c      	add	r4, r3
 8002736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800273a:	2200      	movs	r2, #0
 800273c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002740:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002744:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002748:	4642      	mov	r2, r8
 800274a:	464b      	mov	r3, r9
 800274c:	1891      	adds	r1, r2, r2
 800274e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002750:	415b      	adcs	r3, r3
 8002752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002754:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002758:	4641      	mov	r1, r8
 800275a:	1851      	adds	r1, r2, r1
 800275c:	6339      	str	r1, [r7, #48]	; 0x30
 800275e:	4649      	mov	r1, r9
 8002760:	414b      	adcs	r3, r1
 8002762:	637b      	str	r3, [r7, #52]	; 0x34
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002770:	4659      	mov	r1, fp
 8002772:	00cb      	lsls	r3, r1, #3
 8002774:	4651      	mov	r1, sl
 8002776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800277a:	4651      	mov	r1, sl
 800277c:	00ca      	lsls	r2, r1, #3
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	4603      	mov	r3, r0
 8002784:	4642      	mov	r2, r8
 8002786:	189b      	adds	r3, r3, r2
 8002788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800278c:	464b      	mov	r3, r9
 800278e:	460a      	mov	r2, r1
 8002790:	eb42 0303 	adc.w	r3, r2, r3
 8002794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027ac:	460b      	mov	r3, r1
 80027ae:	18db      	adds	r3, r3, r3
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b2:	4613      	mov	r3, r2
 80027b4:	eb42 0303 	adc.w	r3, r2, r3
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027c2:	f7fd fd09 	bl	80001d8 <__aeabi_uldivmod>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <UART_SetConfig+0x2d4>)
 80027cc:	fba3 1302 	umull	r1, r3, r3, r2
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	2164      	movs	r1, #100	; 0x64
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	3332      	adds	r3, #50	; 0x32
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <UART_SetConfig+0x2d4>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	f003 0207 	and.w	r2, r3, #7
 80027ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4422      	add	r2, r4
 80027f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027f4:	e106      	b.n	8002a04 <UART_SetConfig+0x4d8>
 80027f6:	bf00      	nop
 80027f8:	40011000 	.word	0x40011000
 80027fc:	40011400 	.word	0x40011400
 8002800:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002808:	2200      	movs	r2, #0
 800280a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800280e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002812:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002816:	4642      	mov	r2, r8
 8002818:	464b      	mov	r3, r9
 800281a:	1891      	adds	r1, r2, r2
 800281c:	6239      	str	r1, [r7, #32]
 800281e:	415b      	adcs	r3, r3
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002826:	4641      	mov	r1, r8
 8002828:	1854      	adds	r4, r2, r1
 800282a:	4649      	mov	r1, r9
 800282c:	eb43 0501 	adc.w	r5, r3, r1
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	00eb      	lsls	r3, r5, #3
 800283a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800283e:	00e2      	lsls	r2, r4, #3
 8002840:	4614      	mov	r4, r2
 8002842:	461d      	mov	r5, r3
 8002844:	4643      	mov	r3, r8
 8002846:	18e3      	adds	r3, r4, r3
 8002848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800284c:	464b      	mov	r3, r9
 800284e:	eb45 0303 	adc.w	r3, r5, r3
 8002852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002862:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002872:	4629      	mov	r1, r5
 8002874:	008b      	lsls	r3, r1, #2
 8002876:	4621      	mov	r1, r4
 8002878:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800287c:	4621      	mov	r1, r4
 800287e:	008a      	lsls	r2, r1, #2
 8002880:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002884:	f7fd fca8 	bl	80001d8 <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4b60      	ldr	r3, [pc, #384]	; (8002a10 <UART_SetConfig+0x4e4>)
 800288e:	fba3 2302 	umull	r2, r3, r3, r2
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	011c      	lsls	r4, r3, #4
 8002896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800289a:	2200      	movs	r2, #0
 800289c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028a8:	4642      	mov	r2, r8
 80028aa:	464b      	mov	r3, r9
 80028ac:	1891      	adds	r1, r2, r2
 80028ae:	61b9      	str	r1, [r7, #24]
 80028b0:	415b      	adcs	r3, r3
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b8:	4641      	mov	r1, r8
 80028ba:	1851      	adds	r1, r2, r1
 80028bc:	6139      	str	r1, [r7, #16]
 80028be:	4649      	mov	r1, r9
 80028c0:	414b      	adcs	r3, r1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028d0:	4659      	mov	r1, fp
 80028d2:	00cb      	lsls	r3, r1, #3
 80028d4:	4651      	mov	r1, sl
 80028d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028da:	4651      	mov	r1, sl
 80028dc:	00ca      	lsls	r2, r1, #3
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	4642      	mov	r2, r8
 80028e6:	189b      	adds	r3, r3, r2
 80028e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028ec:	464b      	mov	r3, r9
 80028ee:	460a      	mov	r2, r1
 80028f0:	eb42 0303 	adc.w	r3, r2, r3
 80028f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	67bb      	str	r3, [r7, #120]	; 0x78
 8002902:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002910:	4649      	mov	r1, r9
 8002912:	008b      	lsls	r3, r1, #2
 8002914:	4641      	mov	r1, r8
 8002916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800291a:	4641      	mov	r1, r8
 800291c:	008a      	lsls	r2, r1, #2
 800291e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002922:	f7fd fc59 	bl	80001d8 <__aeabi_uldivmod>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4611      	mov	r1, r2
 800292c:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <UART_SetConfig+0x4e4>)
 800292e:	fba3 2301 	umull	r2, r3, r3, r1
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2264      	movs	r2, #100	; 0x64
 8002936:	fb02 f303 	mul.w	r3, r2, r3
 800293a:	1acb      	subs	r3, r1, r3
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	3332      	adds	r3, #50	; 0x32
 8002940:	4a33      	ldr	r2, [pc, #204]	; (8002a10 <UART_SetConfig+0x4e4>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294c:	441c      	add	r4, r3
 800294e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002952:	2200      	movs	r2, #0
 8002954:	673b      	str	r3, [r7, #112]	; 0x70
 8002956:	677a      	str	r2, [r7, #116]	; 0x74
 8002958:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800295c:	4642      	mov	r2, r8
 800295e:	464b      	mov	r3, r9
 8002960:	1891      	adds	r1, r2, r2
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	415b      	adcs	r3, r3
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800296c:	4641      	mov	r1, r8
 800296e:	1851      	adds	r1, r2, r1
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	4649      	mov	r1, r9
 8002974:	414b      	adcs	r3, r1
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002984:	4659      	mov	r1, fp
 8002986:	00cb      	lsls	r3, r1, #3
 8002988:	4651      	mov	r1, sl
 800298a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800298e:	4651      	mov	r1, sl
 8002990:	00ca      	lsls	r2, r1, #3
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	4603      	mov	r3, r0
 8002998:	4642      	mov	r2, r8
 800299a:	189b      	adds	r3, r3, r2
 800299c:	66bb      	str	r3, [r7, #104]	; 0x68
 800299e:	464b      	mov	r3, r9
 80029a0:	460a      	mov	r2, r1
 80029a2:	eb42 0303 	adc.w	r3, r2, r3
 80029a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	663b      	str	r3, [r7, #96]	; 0x60
 80029b2:	667a      	str	r2, [r7, #100]	; 0x64
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029c0:	4649      	mov	r1, r9
 80029c2:	008b      	lsls	r3, r1, #2
 80029c4:	4641      	mov	r1, r8
 80029c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ca:	4641      	mov	r1, r8
 80029cc:	008a      	lsls	r2, r1, #2
 80029ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029d2:	f7fd fc01 	bl	80001d8 <__aeabi_uldivmod>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <UART_SetConfig+0x4e4>)
 80029dc:	fba3 1302 	umull	r1, r3, r3, r2
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	2164      	movs	r1, #100	; 0x64
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	3332      	adds	r3, #50	; 0x32
 80029ee:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <UART_SetConfig+0x4e4>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	f003 020f 	and.w	r2, r3, #15
 80029fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4422      	add	r2, r4
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a10:	51eb851f 	.word	0x51eb851f

08002a14 <memset>:
 8002a14:	4402      	add	r2, r0
 8002a16:	4603      	mov	r3, r0
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d100      	bne.n	8002a1e <memset+0xa>
 8002a1c:	4770      	bx	lr
 8002a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a22:	e7f9      	b.n	8002a18 <memset+0x4>

08002a24 <__libc_init_array>:
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	4d0d      	ldr	r5, [pc, #52]	; (8002a5c <__libc_init_array+0x38>)
 8002a28:	4c0d      	ldr	r4, [pc, #52]	; (8002a60 <__libc_init_array+0x3c>)
 8002a2a:	1b64      	subs	r4, r4, r5
 8002a2c:	10a4      	asrs	r4, r4, #2
 8002a2e:	2600      	movs	r6, #0
 8002a30:	42a6      	cmp	r6, r4
 8002a32:	d109      	bne.n	8002a48 <__libc_init_array+0x24>
 8002a34:	4d0b      	ldr	r5, [pc, #44]	; (8002a64 <__libc_init_array+0x40>)
 8002a36:	4c0c      	ldr	r4, [pc, #48]	; (8002a68 <__libc_init_array+0x44>)
 8002a38:	f000 f818 	bl	8002a6c <_init>
 8002a3c:	1b64      	subs	r4, r4, r5
 8002a3e:	10a4      	asrs	r4, r4, #2
 8002a40:	2600      	movs	r6, #0
 8002a42:	42a6      	cmp	r6, r4
 8002a44:	d105      	bne.n	8002a52 <__libc_init_array+0x2e>
 8002a46:	bd70      	pop	{r4, r5, r6, pc}
 8002a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a4c:	4798      	blx	r3
 8002a4e:	3601      	adds	r6, #1
 8002a50:	e7ee      	b.n	8002a30 <__libc_init_array+0xc>
 8002a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a56:	4798      	blx	r3
 8002a58:	3601      	adds	r6, #1
 8002a5a:	e7f2      	b.n	8002a42 <__libc_init_array+0x1e>
 8002a5c:	08002aa4 	.word	0x08002aa4
 8002a60:	08002aa4 	.word	0x08002aa4
 8002a64:	08002aa4 	.word	0x08002aa4
 8002a68:	08002aa8 	.word	0x08002aa8

08002a6c <_init>:
 8002a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6e:	bf00      	nop
 8002a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a72:	bc08      	pop	{r3}
 8002a74:	469e      	mov	lr, r3
 8002a76:	4770      	bx	lr

08002a78 <_fini>:
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7a:	bf00      	nop
 8002a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7e:	bc08      	pop	{r3}
 8002a80:	469e      	mov	lr, r3
 8002a82:	4770      	bx	lr
